<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" >
	<fx:Metadata>[Name("authorCtl")]</fx:Metadata>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.osgiliath.model.Author;
			import com.osgiliath.model.Book;
			import com.osgiliath.services.AuthorFlexService;
			import com.osgiliath.services.BookFlexService;
			
			import mx.collections.ArrayCollection;
			
			import org.granite.tide.events.TideResultEvent;
			import org.granite.tide.spring.Context;
			[In]
			public var tideContext:Context;
			private var _author:Author;
			private var _allBooks:ArrayCollection;
			[In]
			public var authorService:AuthorFlexService;
			[In]
			public var bookService:BookFlexService;
			
			[In]
			[Bindable(event="allBooksChanged")]
			public function get allBooks():ArrayCollection
			{
				return _allBooks;
			}

			public function set allBooks(value:ArrayCollection):void
			{
				_allBooks = value;
				dispatchEvent(new Event("allBooksChanged"));
			}

			[In][Out]
			[Bindable (event="authorChanged")]
			public function get author():Author
			{
				return _author;
			}

			public function set author(value:Author):void
			{
				_author = value;
				dispatchEvent(new Event("authorChanged"));
			}

			[Observer("addNewAuthor")]
			public function addNewAuthor():void {	
				bookService.getAll(gotAllBooks);
				authorService.createNew(affectAuthor);
			}
			private function affectAuthor(event:TideResultEvent):void {
				author=Author(event.result);
				dispatchEvent(new Event("selectedBookChange"));
			}
			private function gotAllBooks(event:TideResultEvent):void {
				allBooks=ArrayCollection(event.result);
				dispatchEvent(new Event("selectedBookChange"));
			}
			[Observer("editAuthor")]
			public function editAuthor(author:Author):void {
				bookService.getAll(gotAllBooks);
				authorService.findById(author.id, affectAuthor);		
			}
			
			[Observer("persistAuthor")]
			public function addAuthor(selectedBook:Vector.<Object>):void {
				author.books = new ArrayCollection();
				for each (var book:Book in selectedBook) {
					author.books.addItem(book);
				}
				authorService.save(author, affectAuthor);
				
			}
			[Bindable(event="selectedBookChange")]
			public function selectedBooks():Vector.<Object> {
				var res:Vector.<Object> = new Vector.<Object>();
				if (author != null && author.books != null) {
					for each (var book:Book in allBooks) {
						for each (var authorBook:Book in author.books) {
							if (authorBook.id == book.id) {
								res.push(book);
							}
						}
					}
				}
				return res;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	<mx:Form width="100%">
		<mx:FormItem label="Name">
			<s:TextInput text="@{author.name}"/>
		</mx:FormItem>
		<mx:FormItem label="Books">
			<s:List id="booksList" allowMultipleSelection="true" dataProvider="{allBooks}" labelField="id" selectedItems="{selectedBooks()}"/>
		</mx:FormItem>
		<mx:FormItem label="Add author">
			<s:Button label="Click here!" click="{tideContext.raiseEvent('persistAuthor', booksList.selectedItems)}"/>
		</mx:FormItem>
	</mx:Form>
</s:Group>
